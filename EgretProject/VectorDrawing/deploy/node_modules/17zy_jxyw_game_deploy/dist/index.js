'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var OSS = require('ali-oss');
var axios = require('axios');
var fs = require('fs');
var path = require('path');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var OSS__default = /*#__PURE__*/_interopDefaultLegacy(OSS);
var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

const getOssClient = (apiToken) => {
  return new Promise((resolve, reject) => {
    axios__default['default'].post(apiToken, {
      sign:'17zuoye-jiaoxue',
      time:`${Date.now()}`
    }).then(res => {
      const { region, bucket, accessKeyId, accessKeySecret, stsToken } = res.data.data;
      const client = new OSS__default['default']({
        region: `oss-${region}`,
        bucket,
        accessKeyId,
        accessKeySecret,
        stsToken,
        retryMax: 3,
        secure: true
      });
      resolve(client);
    });
  })
};

const parseArguments = () => {
  const args = process.argv.slice(2);
  const formartArgs = {};
  args.forEach(item => {
    const [key, value] = item.split('=');
    formartArgs[key] = value;
  });
  return formartArgs
};

// 路径拼接
const joinPath = (...arg) => {
  return arg.reduce((pre, current) => {
    return `${pre}${current[0] === '/' ? '' : '/'}${current}`
  })
};

// 获取需要上传的所有文件
const getPathList = (distDir, dir = '') => {
  const curDir = joinPath(distDir, dir);
  const files = fs__default['default'].readdirSync(curDir);
  const pathList = [];
  files.forEach(file => {
    const filePath = joinPath(distDir, dir, file);
    const stat = fs__default['default'].statSync(path__default['default'].resolve(filePath));
    if (stat.isDirectory()) {
      pathList.push(...getPathList(distDir, joinPath(dir, file)));
    } else {
      pathList.push(joinPath(dir, file));
    }
  });
  return pathList
};

// 上传oss
const putToOss = ({ client, distDir, envOssDir, filePath }) => {
  return new Promise((resolve, reject) => {
    const destPath = joinPath(envOssDir, filePath);
    const sourcePath = joinPath(distDir, filePath);
    client.put(destPath, sourcePath).then(result => {
      resolve(result);
    }).catch(err => {
      reject(err);
      process.exit();
    });
  })
};

const ENV = {
  TEST: 'test',
  PROD: 'production'
};

const ENV_NAME = {
  [ENV.TEST]: '测试环境',
  [ENV.PROD]: '生产环境'
};

const getNoticeMessage = ({ success, appBaseDir, projectName, pages, ossHost, cdnHost, result: resultArr = [], err = '', env } = {}) => {
  const envName = ENV_NAME[env];

  let outPutMessage;
  if (success) {
    outPutMessage = '';
    const resultHtmlArr = resultArr.filter(result => {
      return result.url.includes('.html')
    });
    resultHtmlArr.forEach(result => {
      const findPage = pages.find(page => {
        return result.url.includes(page.html)
      });
      if (findPage) {
        const cdnUrl = ossToCdn(result.url, ossHost, cdnHost);
        outPutMessage = `${outPutMessage}${findPage.name}: ${cdnUrl}\n`;
      }
    });
  } else {
    outPutMessage = err;
  }

  const now = new Date().toTimeString();
  const message = `${envName}\n${projectName}项目\n发布${success ? '成功\n' : '失败\n'}${outPutMessage}${now}\n${getAllPagesMessage(env, appBaseDir)}`;
  return message
};

const getAllPagesMessage = (env, appBaseDir) => {
  return `全部交互工具：${appBaseDir.replace('{0}', env)}/index.html`
};

// oss地址转cdn地址
const ossToCdn = (url, ossHost, cdnHost) => {
  return url.replace(ossHost, cdnHost)
};

const updateMainIndexPage = ({ client, env, ossDir, pages,appBaseDir }) => {
  const configUrl = `${appBaseDir.replace('{0}',env)}/config.json`;

  console.log(configUrl);

  axios__default['default'].get(`${configUrl}?v=${Date.now()}`).then(res => {
    const config = res.data;
    pages.forEach(page => {
      if (page.hide) {
        delete config[page.key];
      } else {
        config[page.key] = {
          name: page.name,
          url: `${ossDir}/${page.html}`
        };
      }
    });

    client.put(`${env}/apps/config.json`, Buffer.from(JSON.stringify(config, null, 4))).then(() => {
      console.log('交互主页更新完毕');
    }).catch(() => {
      console.log('交互主页更新失败');
    });
  });
};

const notify = ({ msg,webhook } = {}) => {
  return new Promise((resolve, reject) => {
    const notifyParams = {
      msgtype: 'text',
      text: {
        content: msg
      }
    };
    axios__default['default'].post(webhook, notifyParams).then(() => {
      console.log('通知成功');
      resolve();
    }).catch(err => {
      console.log('通知失败');
      reject(err);
    });
  })
};

const gameDeploy = (configPath) => {
  // 解析参数,校验环境
  const formartArgs = parseArguments();
  console.log(formartArgs);
  if (![ENV.TEST, ENV.PROD].includes(formartArgs.env)) {
    console.error('必须显示指定env=test|production');
    return
  }

  //读取配置文件
  Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require(configPath)); }).then(module => {
    const { distDir, ossDir, projectName, pages, webhook, apiToken, appBaseDir, ossHost, cdnHost } = module;
    // 获取上传token,创建上传用对象
    getOssClient(apiToken).then((client) => {
    //   // 要发布的环境
      const env = formartArgs.env;
    //   // 获取需要上传的所有文件
      const pathList = getPathList(distDir);
    //   // 生成上传文件的promise数组
      const envOssDir = `${env}/apps/${ossDir}`;
      const promiseArr = pathList.map(filePath => {
        return putToOss({ client, distDir, envOssDir, filePath })
      });
    //   // PromiseAll获取上传结果,并通知微信群
      Promise.all(promiseArr).then((result) => {
    //     // 更新交互工具主页
        updateMainIndexPage({ client, env, ossDir, pages, appBaseDir });
        notify({ msg: getNoticeMessage({ success: true, result, projectName, pages, env, appBaseDir, ossHost, cdnHost }), webhook });
      }).catch(err => {
        notify({ msg: getNoticeMessage({ success: false, err, projectName, pages, env, appBaseDir, ossHost, cdnHost }), webhook });
        console.log(err);
      });
    });
  });

};

exports.gameDeploy = gameDeploy;
